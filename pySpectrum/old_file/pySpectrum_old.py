# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main_win.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, QThread, pyqtSignal
from pyqtgraph import ImageItem, GraphicsLayoutWidget, mkPen
import serial
import serial.tools.list_ports
import numpy as np
from threading import Thread
from time import sleep
from wavelen2rgb import wavelen2rgb, Adjust_and_Scale


def adjust_gamma(col, fac, highest):
    Gamma = 2.2
    if col == 0.0:
        result = 0
    else:
        result = pow(col * fac, Gamma) * highest
        if result < 0:
            result = 0
        if result > highest:
            result = highest

    return result


class Ui_MainWindow(object):

    def start_thread_continued(self):
        self.progress.setValue(0)
        self.thread = QThread()
        self.worker = Worker(self.port, "m", 3648 * 3, self.measure_spin_box.value())
        self.worker.moveToThread(self.thread)
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.thread.finished.connect(self.start_thread_continued)

        self.worker.stopped.connect(self.thread.quit)
        self.worker.stopped.connect(self.worker.deleteLater)
        self.worker.stopped.connect(self.thread.deleteLater)
        self.worker.stopped.connect(self.handle_stop)

        self.worker.progress.connect(self.report)
        self.worker.progress.connect(self.update_progress_bar)
        self.worker.data_sig.connect(self.update_data)
        self.thread.start()

    def stop_btn_action(self):
        self.stopped = True
        self.port.write("s".encode())
        self.stop_btn.setEnabled(False)

    def handle_stop(self):
        self.thread.finished.disconnect(self.start_thread_continued)
        self.port.close()
        self.report("Stopped")
        self.progress.setStyleSheet("QProgressBar::chunk{background-color:#f73725}")
        self.start_btn.setEnabled(True)
        self.integration_spin_box.setEnabled(True)
        self.measure_spin_box.setEnabled(True)
        self.single_radio.setEnabled(True)
        self.continued_radio.setEnabled(True)
        self.open_btn.setEnabled(True)

    def handle_finish(self):
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.integration_spin_box.setEnabled(True)
        self.measure_spin_box.setEnabled(True)
        self.single_radio.setEnabled(True)
        self.continued_radio.setEnabled(True)
        self.open_btn.setEnabled(True)
        self.report("Finished")

    def update_progress_bar(self, value):
        self.progress.setValue(value)

    def update_data(self, raw_data):
        self.count_value.setText(str((self.iteration+1)*self.measure_spin_box.value()))
        data = np.array([int(raw_data[i:i + 3], 16) for i in range(0, len(raw_data), 3)], dtype=np.float32)
        if self.iteration == 0:
            self.curr_data = data
            self.plot_area.clear()
            self.plot_area.plot(np.array(self.curr_data), pen=mkPen('k'))
            self.plot_area.setYRange(np.amin(self.curr_data), np.amax(self.curr_data))
        else:
            self.curr_data += data
            self.plot_area.clear()
            self.plot_area.plot(np.array(self.curr_data/(self.iteration+1)), pen=mkPen('k'))
            self.plot_area.setYRange(np.amin(self.curr_data/(self.iteration+1)), np.amax(self.curr_data/(self.iteration+1)))

        _min = np.amin(self.curr_data/(self.iteration+1))
        _max = np.amax(self.curr_data/(self.iteration+1))
        intensity = np.array([(i - _min) / (_max - _min) for i in self.curr_data/(self.iteration+1)], dtype=np.float32)
        img = np.array([wavelen2rgb(i, 255) for i in np.linspace(380, 720, 3648)], dtype=np.float32) / 255.
        im = np.zeros((3648, 1, 3), dtype=np.float32)
        for i in range(3648):
            im[i][0] = np.array([np.power(col * intensity[i], 2.3) for col in img[i]], dtype=np.float32)
        self.img_item.setImage(im)
        self.iteration += 1

    def update_plot(self, raw_data):
        data = [int(raw_data[i:i + 3], 16) for i in range(0, len(raw_data), 3)]
        self.report(len(data))
        self.plot_area.clear()
        self.plot_area.plot(np.array(data), pen=mkPen('k'))
        self.plot_area.setYRange(np.amin(data), np.amax(data))

        _min = np.amin(data)
        _max = np.amax(data)
        intensity = np.array([(i-_min)/(_max-_min) for i in data], dtype=np.float32)
        img = np.array([wavelen2rgb(i, 255) for i in np.linspace(380, 720, 3648)], dtype=np.float32)/255.
        im = np.zeros((3648, 1, 3), dtype=np.float32)
        for i in range(3648):
            im[i][0] = np.array([np.power(col*intensity[i], 2.3) for col in img[i]], dtype=np.float32)
        self.img_item.setImage(im)

    def serial_msg(self, command, n_byte):
        """ Send cammand to serial port and wait response """
        self.port.open()
        self.port.write(command.encode())
        self.port.flush()
        while self.port.inWaiting() < n_byte:
            pass
        self.port.reset_input_buffer()
        self.port.close()
        self.report(f"sended command {command}")

    def report(self, message):
        self.statusBar.showMessage(str(message))
        
    def refresh_btn_action(self):
        self.com_list = []
        coms = serial.tools.list_ports.comports(True)
        self.port_combo.clear()
        if len(coms) == 0:
            self.report("No Port Founded")
        else:
            self.report(f"{len(coms)} Port Found")
            for com in coms:
                add_string = ""
                if com.pid == self.TEENSY_PID and com.vid == self.TEENSY_VID:
                    add_string = " (Teensy 4.1)"
                self.port_combo.addItem(com.device+add_string)
                self.com_list.append(com.device)
            self.open_btn.setEnabled(True)

    def open_btn_action(self):
        if self.connected:
            self.open_btn.setStyleSheet("")
            self.open_btn.setText("Open")
            self.port_combo.setEnabled(True)
            self.refresh_btn.setEnabled(True)
            self.measure_group.setEnabled(False)
            self.background_group.setEnabled(False)
            self.graph_setting_group.setEnabled(False)
            self.port.close()
            self.connected = False
            self.report(f"Closed Connection")
        else:
            self.COM = self.com_list[self.port_combo.currentIndex()]
            try:
                self.port = serial.Serial(port="COM15", baudrate=self.BAUDRATE)
            except serial.serialutil.SerialException:
                self.report(f"Could not open {self.COM}")
            else:
                self.report(f"Connected to {self.COM}")
            self.port.close()
            self.open_btn.setText("Close")
            self.open_btn.setStyleSheet("")
            self.port_combo.setEnabled(False)
            self.refresh_btn.setEnabled(False)
            self.measure_group.setEnabled(True)
            self.background_group.setEnabled(True)
            self.graph_setting_group.setEnabled(True)
            self.connected = True

    def measure_radio_action(self, radio):
        self.measure_type = radio.value
        self.report(f"Set measure to {radio.value}")
    
    def start_measure(self):
        self.stopped = False
        self.start_btn.setEnabled(False)
        self.integration_spin_box.setEnabled(False)
        self.measure_spin_box.setEnabled(False)
        self.single_radio.setEnabled(False)
        self.continued_radio.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.open_btn.setEnabled(False)

        self.report("Starting measure")
        if self.measure_type.lower() == "Single".lower():
            int_time = self.integration_spin_box.value()
            n_measure = self.measure_spin_box.value()
            self.serial_msg(f"i{int_time}", 1)
            self.serial_msg(f"n{n_measure}", 1)

            self.progress.setMaximum(n_measure)
            self.progress.setStyleSheet("QProgressBar::chunk {background-color: #62d64b;width:2px;}")
            self.progress.setValue(0)

            self.thread = QThread()
            self.worker = Worker(self.port, "m", 3648*3, n_measure)
            self.worker.moveToThread(self.thread)
            self.thread.started.connect(self.worker.run)
            self.worker.finished.connect(self.thread.quit)
            self.worker.finished.connect(self.worker.deleteLater)
            self.thread.finished.connect(self.thread.deleteLater)
            self.worker.finished.connect(self.handle_finish)

            self.worker.stopped.connect(self.thread.quit)
            self.worker.stopped.connect(self.worker.deleteLater)
            self.worker.stopped.connect(self.thread.deleteLater)
            self.worker.stopped.connect(self.handle_stop)

            self.worker.progress.connect(self.report)
            self.worker.progress.connect(self.update_progress_bar)
            self.worker.data_sig.connect(self.update_plot)

            self.thread.start()

        else:
            self.iteration = 0
            int_time = self.integration_spin_box.value()
            n_measure = self.measure_spin_box.value()
            self.serial_msg(f"i{int_time}", 1)
            self.serial_msg(f"n{n_measure}", 1)
            self.progress.setMaximum(n_measure)
            self.progress.setStyleSheet("QProgressBar::chunk {background-color: #62d64b;width:2px;}")
            self.progress.setValue(0)
            self.start_thread_continued()

    def setupUi(self, MainWindow):

        self.connected = False
        self.port = None
        self.com_list = None
        self.COM = None
        self.measure_type = "single"
        self.curr_thread = None

        self.curr_data = None
        self.iteration = 0

        self.BAUDRATE = 115200
        self.TEENSY_VID = 5824
        self.TEENSY_PID = 1155
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1724, 1000)
        font = QtGui.QFont()
        font.setPointSize(9)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Spectruino.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setAutoFillBackground(False)
        MainWindow.showMaximized()
        self.main_widget = QtWidgets.QWidget(MainWindow)
        self.main_widget.setObjectName("main_widget")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.main_widget)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.Comands_layout = QtWidgets.QHBoxLayout()
        self.Comands_layout.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.Comands_layout.setObjectName("Comands_layout")

        # COMUNICATION
        self.com_group = QtWidgets.QGroupBox(self.main_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.com_group.sizePolicy().hasHeightForWidth())
        self.com_group.setSizePolicy(sizePolicy)
        self.com_group.setMinimumSize(QtCore.QSize(350, 0))
        self.com_group.setMaximumSize(QtCore.QSize(16777215, 100))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.com_group.setFont(font)
        self.com_group.setObjectName("com_group")
        self.gridLayout = QtWidgets.QGridLayout(self.com_group)
        self.gridLayout.setObjectName("gridLayout")
        self.port_grid_layout = QtWidgets.QGridLayout()
        self.port_grid_layout.setObjectName("port_grid_layout")

        # port_label
        self.port_label = QtWidgets.QLabel(self.com_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.port_label.sizePolicy().hasHeightForWidth())
        self.port_label.setSizePolicy(sizePolicy)
        self.port_label.setSizeIncrement(QtCore.QSize(0, 0))
        self.port_label.setBaseSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.port_label.setFont(font)
        self.port_label.setTextFormat(QtCore.Qt.AutoText)
        self.port_label.setAlignment(QtCore.Qt.AlignCenter)
        self.port_label.setWordWrap(True)
        self.port_label.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.port_label.setObjectName("port_label")
        self.port_grid_layout.addWidget(self.port_label, 0, 0, 1, 1)

        # port combo
        self.port_combo = QtWidgets.QComboBox(self.com_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.port_combo.sizePolicy().hasHeightForWidth())
        self.port_combo.setSizePolicy(sizePolicy)
        self.port_combo.setMinimumSize(QtCore.QSize(0, 25))
        self.port_combo.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.port_combo.setAutoFillBackground(False)
        self.port_combo.setCurrentText("...")
        self.port_combo.setObjectName("port_combo")
        self.port_combo.addItem("")
        self.port_grid_layout.addWidget(self.port_combo, 1, 0, 1, 1)
        self.gridLayout.addLayout(self.port_grid_layout, 0, 0, 1, 1)

        # refresh button
        self.refresh_btn = QtWidgets.QPushButton(self.com_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.refresh_btn.sizePolicy().hasHeightForWidth())
        self.refresh_btn.setSizePolicy(sizePolicy)
        self.refresh_btn.setMaximumSize(QtCore.QSize(80, 16777215))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.refresh_btn.setFont(font)
        self.refresh_btn.setObjectName("refresh_btn")
        self.gridLayout.addWidget(self.refresh_btn, 0, 1, 1, 1)
        self.refresh_btn.clicked.connect(self.refresh_btn_action)

        # open button
        self.open_btn = QtWidgets.QPushButton(self.com_group)
        self.open_btn.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.open_btn.sizePolicy().hasHeightForWidth())
        self.open_btn.setSizePolicy(sizePolicy)
        self.open_btn.setMaximumSize(QtCore.QSize(80, 16777215))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.open_btn.setFont(font)
        self.open_btn.setObjectName("open_btn")
        self.gridLayout.addWidget(self.open_btn, 0, 2, 1, 1)
        self.Comands_layout.addWidget(self.com_group)
        self.open_btn.clicked.connect(self.open_btn_action)

        # MEASURE
        self.measure_group = QtWidgets.QGroupBox(self.main_widget)
        self.measure_group.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.measure_group.sizePolicy().hasHeightForWidth())
        self.measure_group.setSizePolicy(sizePolicy)
        self.measure_group.setMaximumSize(QtCore.QSize(1300, 100))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.measure_group.setFont(font)
        self.measure_group.setObjectName("measure_group")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.measure_group)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.Radio_layout = QtWidgets.QVBoxLayout()
        self.Radio_layout.setObjectName("Radio_layout")

        # radio
        self.single_radio = QtWidgets.QRadioButton(self.measure_group)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.single_radio.setFont(font)
        self.single_radio.setChecked(True)
        self.single_radio.setObjectName("single_radio")
        self.single_radio.value = "Single"
        self.single_radio.toggled.connect(lambda: self.measure_radio_action(self.single_radio))
        self.radio_group = QtWidgets.QButtonGroup(MainWindow)
        self.radio_group.setObjectName("radio_group")
        self.radio_group.addButton(self.single_radio)
        self.Radio_layout.addWidget(self.single_radio)
        self.continued_radio = QtWidgets.QRadioButton(self.measure_group)
        self.continued_radio.setEnabled(True)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.continued_radio.setFont(font)
        self.continued_radio.setChecked(False)
        self.continued_radio.setObjectName("continued_radio")
        self.continued_radio.value = "Continued"
        self.continued_radio.toggled.connect(lambda: self.measure_radio_action(self.continued_radio))
        self.radio_group.addButton(self.continued_radio)
        self.Radio_layout.addWidget(self.continued_radio)
        self.gridLayout_2.addLayout(self.Radio_layout, 0, 2, 1, 1)

        # stop button
        self.stop_btn = QtWidgets.QPushButton(self.measure_group)
        self.stop_btn.setEnabled(False)
        self.stop_btn.clicked.connect(self.stop_btn_action)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stop_btn.sizePolicy().hasHeightForWidth())
        self.stop_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.stop_btn.setFont(font)
        self.stop_btn.setFlat(False)
        self.stop_btn.setObjectName("stop_btn")
        self.gridLayout_2.addWidget(self.stop_btn, 0, 4, 1, 1)

        # count frame
        self.count_frame = QtWidgets.QFrame(self.measure_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.count_frame.sizePolicy().hasHeightForWidth())
        self.count_frame.setSizePolicy(sizePolicy)
        self.count_frame.setMinimumSize(QtCore.QSize(120, 0))
        self.count_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.count_frame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.count_frame.setObjectName("count_frame")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.count_frame)
        self.gridLayout_4.setObjectName("gridLayout_4")

        # count label
        self.count_value = QtWidgets.QLabel(self.count_frame)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.count_value.setFont(font)
        self.count_value.setAlignment(QtCore.Qt.AlignCenter)
        self.count_value.setObjectName("count_value")
        self.gridLayout_4.addWidget(self.count_value, 2, 0, 1, 1)
        self.count_label = QtWidgets.QLabel(self.count_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.count_label.sizePolicy().hasHeightForWidth())
        self.count_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.count_label.setFont(font)
        self.count_label.setAlignment(QtCore.Qt.AlignCenter)
        self.count_label.setObjectName("count_label")
        self.gridLayout_4.addWidget(self.count_label, 1, 0, 1, 1)
        self.gridLayout_2.addWidget(self.count_frame, 0, 5, 1, 1)

        # start button
        self.start_btn = QtWidgets.QPushButton(self.measure_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.start_btn.sizePolicy().hasHeightForWidth())
        self.start_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.start_btn.setFont(font)
        self.start_btn.setFlat(False)
        self.start_btn.setObjectName("start_btn")
        self.gridLayout_2.addWidget(self.start_btn, 0, 3, 1, 1)
        self.start_btn.clicked.connect(self.start_measure)
        
        self.measure_grid_layout = QtWidgets.QGridLayout()
        self.measure_grid_layout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.measure_grid_layout.setObjectName("measure_grid_layout")
        self.measure_label = QtWidgets.QLabel(self.measure_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.measure_label.sizePolicy().hasHeightForWidth())
        self.measure_label.setSizePolicy(sizePolicy)
        self.measure_label.setMinimumSize(QtCore.QSize(120, 0))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.measure_label.setFont(font)
        self.measure_label.setObjectName("measure_label")
        self.measure_grid_layout.addWidget(self.measure_label, 0, 0, 1, 1)

        # measure spinbox
        self.measure_spin_box = QtWidgets.QSpinBox(self.measure_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.measure_spin_box.sizePolicy().hasHeightForWidth())
        self.measure_spin_box.setSizePolicy(sizePolicy)
        self.measure_spin_box.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.measure_spin_box.setFont(font)
        self.measure_spin_box.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.measure_spin_box.setSuffix("")
        self.measure_spin_box.setPrefix("")
        self.measure_spin_box.setMaximum(99999)
        self.measure_spin_box.setStepType(QtWidgets.QAbstractSpinBox.DefaultStepType)
        self.measure_spin_box.setProperty("value", 1)
        self.measure_spin_box.setObjectName("measure_spin_box")
        self.measure_grid_layout.addWidget(self.measure_spin_box, 0, 1, 1, 1)

        self.integration_label = QtWidgets.QLabel(self.measure_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.integration_label.sizePolicy().hasHeightForWidth())
        self.integration_label.setSizePolicy(sizePolicy)
        self.integration_label.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.integration_label.setFont(font)
        self.integration_label.setObjectName("integration_label")
        self.measure_grid_layout.addWidget(self.integration_label, 1, 0, 1, 1)

        # integration spinbox
        self.integration_spin_box = QtWidgets.QSpinBox(self.measure_group)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.integration_spin_box.setFont(font)
        self.integration_spin_box.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.integration_spin_box.setReadOnly(False)
        self.integration_spin_box.setMaximum(99999)
        self.integration_spin_box.setProperty("value", 100)
        self.integration_spin_box.setObjectName("integration_spin_box")
        self.measure_grid_layout.addWidget(self.integration_spin_box, 1, 1, 1, 1)
        self.measure_grid_layout.setColumnMinimumWidth(0, 120)
        self.measure_grid_layout.setColumnMinimumWidth(1, 100)
        self.gridLayout_2.addLayout(self.measure_grid_layout, 0, 0, 1, 1)
        self.vl_1 = QtWidgets.QFrame(self.measure_group)
        self.vl_1.setMinimumSize(QtCore.QSize(10, 0))
        self.vl_1.setFrameShape(QtWidgets.QFrame.VLine)
        self.vl_1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.vl_1.setObjectName("vl_1")
        self.gridLayout_2.addWidget(self.vl_1, 0, 1, 1, 1)
        self.Comands_layout.addWidget(self.measure_group)

        # BACKGROUND
        self.background_group = QtWidgets.QGroupBox(self.main_widget)
        self.background_group.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.background_group.sizePolicy().hasHeightForWidth())
        self.background_group.setSizePolicy(sizePolicy)
        self.background_group.setMinimumSize(QtCore.QSize(0, 100))
        self.background_group.setObjectName("background_group")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.background_group)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.background_layout = QtWidgets.QHBoxLayout()
        self.background_layout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.background_layout.setObjectName("background_layout")
        self.background_btn = QtWidgets.QPushButton(self.background_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.background_btn.sizePolicy().hasHeightForWidth())
        self.background_btn.setSizePolicy(sizePolicy)
        self.background_btn.setMinimumSize(QtCore.QSize(130, 0))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.background_btn.setFont(font)
        self.background_btn.setObjectName("background_btn")
        self.background_layout.addWidget(self.background_btn)
        self.subtract_check_box = QtWidgets.QCheckBox(self.background_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.subtract_check_box.sizePolicy().hasHeightForWidth())
        self.subtract_check_box.setSizePolicy(sizePolicy)
        self.subtract_check_box.setMinimumSize(QtCore.QSize(40, 0))
        self.subtract_check_box.setObjectName("subtract_check_box")
        self.background_layout.addWidget(self.subtract_check_box)
        self.gridLayout_3.addLayout(self.background_layout, 0, 0, 1, 1)
        self.Comands_layout.addWidget(self.background_group)

        # GRAPH SETTING
        self.graph_setting_group = QtWidgets.QGroupBox(self.main_widget)
        self.graph_setting_group.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(100)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.graph_setting_group.sizePolicy().hasHeightForWidth())
        self.graph_setting_group.setSizePolicy(sizePolicy)
        self.graph_setting_group.setMinimumSize(QtCore.QSize(0, 100))
        self.graph_setting_group.setMaximumSize(QtCore.QSize(400, 100))
        self.graph_setting_group.setObjectName("graph_setting_group")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.graph_setting_group)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.graph_setting_layout = QtWidgets.QGridLayout()
        self.graph_setting_layout.setObjectName("graph_setting_layout")
        self.low_get_btn = QtWidgets.QPushButton(self.graph_setting_group)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.low_get_btn.setFont(font)
        self.low_get_btn.setObjectName("low_get_btn")
        self.graph_setting_layout.addWidget(self.low_get_btn, 0, 1, 2, 1)
        self.set_btn = QtWidgets.QPushButton(self.graph_setting_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.set_btn.sizePolicy().hasHeightForWidth())
        self.set_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.set_btn.setFont(font)
        self.set_btn.setObjectName("set_btn")
        self.graph_setting_layout.addWidget(self.set_btn, 0, 3, 3, 1)
        self.hig_ref_label = QtWidgets.QLabel(self.graph_setting_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.hig_ref_label.sizePolicy().hasHeightForWidth())
        self.hig_ref_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.hig_ref_label.setFont(font)
        self.hig_ref_label.setObjectName("hig_ref_label")
        self.graph_setting_layout.addWidget(self.hig_ref_label, 2, 0, 1, 1)
        self.high_get_btn = QtWidgets.QPushButton(self.graph_setting_group)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.high_get_btn.setFont(font)
        self.high_get_btn.setObjectName("high_get_btn")
        self.graph_setting_layout.addWidget(self.high_get_btn, 2, 1, 1, 1)
        self.high_val = QtWidgets.QLineEdit(self.graph_setting_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.high_val.sizePolicy().hasHeightForWidth())
        self.high_val.setSizePolicy(sizePolicy)
        self.high_val.setMinimumSize(QtCore.QSize(50, 0))
        self.high_val.setObjectName("high_val")
        self.graph_setting_layout.addWidget(self.high_val, 2, 2, 1, 1)
        self.grid_toggle_check_box = QtWidgets.QCheckBox(self.graph_setting_group)
        self.grid_toggle_check_box.setObjectName("grid_toggle_check_box")
        self.graph_setting_layout.addWidget(self.grid_toggle_check_box, 0, 4, 3, 1)
        self.low_val = QtWidgets.QLineEdit(self.graph_setting_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.low_val.sizePolicy().hasHeightForWidth())
        self.low_val.setSizePolicy(sizePolicy)
        self.low_val.setMinimumSize(QtCore.QSize(50, 0))
        self.low_val.setObjectName("low_val")
        self.graph_setting_layout.addWidget(self.low_val, 0, 2, 2, 1)
        self.low_ref_label = QtWidgets.QLabel(self.graph_setting_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.low_ref_label.sizePolicy().hasHeightForWidth())
        self.low_ref_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.low_ref_label.setFont(font)
        self.low_ref_label.setObjectName("low_ref_label")
        self.graph_setting_layout.addWidget(self.low_ref_label, 0, 0, 2, 1)
        self.gridLayout_6.addLayout(self.graph_setting_layout, 0, 0, 1, 1)
        self.Comands_layout.addWidget(self.graph_setting_group)
        spacerItem = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Comands_layout.addItem(spacerItem)
        self.gridLayout_5.addLayout(self.Comands_layout, 0, 0, 1, 2)

        # TREE VIEW

        self.tree_wid = QtWidgets.QTreeWidget(self.main_widget)
        self.tree_wid.setMinimumSize(QtCore.QSize(350, 0))
        self.tree_wid.setSizePolicy(sizePolicy)
        self.tree_wid.setObjectName("tree_wid")
        self.bold_font = QtGui.QFont()
        self.bold_font.setPointSize(12)
        self.bold_font.setBold(True)
        self.bold_font.setWeight(75)
        self.tree_wid.setColumnWidth(0, 150)
        self.tree_wid.headerItem().setFont(0, self.bold_font)
        self.tree_wid.headerItem().setFont(1, self.bold_font)
        self.tree_wid.headerItem().setText(0, "Name")
        self.tree_wid.headerItem().setText(1, "Value")

        self.norm_font = QtGui.QFont()
        self.norm_font.setPointSize(11)
        self.item_0 = QtWidgets.QTreeWidgetItem(self.tree_wid)
        self.item_0.setText(0, "Grafico_1")
        self.item_0.setFont(0, self.norm_font)

        self.italic_font = QtGui.QFont()
        self.italic_font.setItalic(True)
        self.italic_font.setPointSize(10)
        self.item_0.addChild(QtWidgets.QTreeWidgetItem(self.item_0))
        self.item_0.setExpanded(True)
        self.item_0.child(0).setText(0, "Count")
        self.item_0.child(0).setFont(0, self.italic_font)
        self.item_0.child(0).setText(1, "100")
        # self.item_0.child(0).setFont(1, self.norm_font)
        self.gridLayout_5.addWidget(self.tree_wid, 2, 1, 1, 1)

        # tree bar option
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.rename_label = QtWidgets.QLabel(self.main_widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.rename_label.setFont(font)
        self.rename_label.setObjectName("rename_label")
        self.horizontalLayout.addWidget(self.rename_label)
        self.rename_val = QtWidgets.QLineEdit(self.main_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rename_val.sizePolicy().hasHeightForWidth())
        self.rename_val.setSizePolicy(sizePolicy)
        self.rename_val.setObjectName("rename_val")
        self.horizontalLayout.addWidget(self.rename_val)
        self.rename_btn = QtWidgets.QPushButton(self.main_widget)
        self.rename_btn.setObjectName("rename_btn")
        self.horizontalLayout.addWidget(self.rename_btn)
        self.gridLayout_5.addLayout(self.horizontalLayout, 1, 1, 1, 1)

        # GRAPH FRAME
        self.frame = QtWidgets.QFrame(self.main_widget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        self.gridLayout_7 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_7.setObjectName("gridLayout_7")

        self.view = GraphicsLayoutWidget()
        self.view.setBackground("w")

        self.plot_area = self.view.addPlot(0, 0)
        self.plot_area.disableAutoRange()
        self.plot_area.setMouseEnabled(x=False, y=False)
        self.plot_area.hideButtons()
        self.plot_area.setYRange(0, 4096, padding=False)
        self.plot_area.vb.setLimits(xMin=0, xMax=3648, yMin=0, yMax=4096)

        self.xaxis = self.plot_area.getAxis("bottom")
        self.yaxis = self.plot_area.getAxis("left")
        # self.xaxis.setTicks(ticks)
        self.xaxis.setTextPen("k")
        self.xaxis.setPen("k")
        self.yaxis.setTextPen("k")
        self.yaxis.setPen("k")
        self.plot_area.showGrid(True, True, alpha=0.2)

        # self.vl = self.plot_area.addLine(x=400, movable=True, pen=mkPen('b', style=QtCore.Qt.DashLine), bounds=[1, 3648])
        # self.vl.pen.setDashPattern([10, 10])
        # self.vl.addMarker('>|<', position=0.5, size=15)
        # self.vl.sigDragged.connect(self.update_val)

        self.img_area = self.view.addPlot(1, 0)
        self.img_area.setMaximumSize(1000000, 50)
        self.img_area.setXLink(self.plot_area)
        self.img_area.setXRange(0, 3648, padding=False)

        self.img_item = ImageItem()
        self.img_area.addItem(self.img_item)
        self.img_area.showAxis("bottom", show=False)
        self.img_area.showAxis("left", show=False)
        self.img_area.setMouseEnabled(x=False, y=False)
        self.img_area.hideButtons()

        self.gridLayout_7.addWidget(self.view, 0, 0, 1, 1)
        self.gridLayout_5.addWidget(self.frame, 1, 0, 2, 1)

        self.img_item.setImage(np.zeros((3648, 1, 3)))

        # MENU
        MainWindow.setCentralWidget(self.main_widget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1724, 1000))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)

        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        self.statusBar.setStyleSheet("QProgressBar::chunk{width:1px}")
        MainWindow.setStatusBar(self.statusBar)
        self.progress = QtWidgets.QProgressBar(self.statusBar)
        self.progress.setMaximumWidth(300)
        self.progress.setStyleSheet("QProgressBar::chunk {background-color: #62d64b;}")
        self.progress.setTextVisible(False)
        self.statusBar.addPermanentWidget(self.progress)

        self.action_Save = QtWidgets.QAction(MainWindow)
        self.action_Save.setObjectName("action_Save")
        self.actionExport_data = QtWidgets.QAction(MainWindow)
        self.actionExport_data.setObjectName("actionExport_data")
        self.menuFile.addAction(self.action_Save)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def update_val(self):
        self.report(str(int(self.vl.value())))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "pySpectrum"))
        self.com_group.setTitle(_translate("MainWindow", "Comunication"))
        self.port_label.setText(_translate("MainWindow", "Port:"))
        self.port_combo.setItemText(0, _translate("MainWindow", "..."))
        self.refresh_btn.setText(_translate("MainWindow", "Refresh"))
        self.open_btn.setText(_translate("MainWindow", "Open"))
        self.measure_group.setTitle(_translate("MainWindow", "Measure"))
        self.single_radio.setText(_translate("MainWindow", "Single"))
        self.continued_radio.setText(_translate("MainWindow", "Continued"))
        self.stop_btn.setText(_translate("MainWindow", "Stop\n Measure"))
        self.count_value.setText(_translate("MainWindow", "0"))
        self.count_label.setText(_translate("MainWindow", "Count:"))
        self.start_btn.setText(_translate("MainWindow", "Start\n Measure"))
        self.measure_label.setText(_translate("MainWindow", "N° measure"))
        self.integration_label.setText(_translate("MainWindow", "Integration (ms)"))
        self.background_group.setTitle(_translate("MainWindow", "Background"))
        self.background_btn.setText(_translate("MainWindow", "Set measure as \n BackGround"))
        self.subtract_check_box.setText(_translate("MainWindow", "Subtract"))
        self.graph_setting_group.setTitle(_translate("MainWindow", "Graph Setting"))
        self.low_get_btn.setText(_translate("MainWindow", "Get"))
        self.set_btn.setText(_translate("MainWindow", "Set"))
        self.hig_ref_label.setText(_translate("MainWindow", "High ref"))
        self.high_get_btn.setText(_translate("MainWindow", "Get"))
        self.grid_toggle_check_box.setText(_translate("MainWindow", "Grid on/off"))
        self.low_ref_label.setText(_translate("MainWindow", "Low ref"))
        self.rename_label.setText(_translate("MainWindow", "Rename"))
        self.rename_btn.setText(_translate("MainWindow", "Rename"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.action_Save.setText(_translate("MainWindow", "Save Graph"))
        self.action_Save.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionExport_data.setText(_translate("MainWindow", "Export data"))


# HELP: https://realpython.com/python-pyqt-qthread/  --> non dice tutto il necessario infatti :
# INPORTANTE la funzione run non deve avere nessun parametro altrimento si sminchia tutto e si blocca il programma
# creo invece una classe Object con sei parametri che fisso all'inizio quando chiamo __init__
class Worker(QObject):

    finished = pyqtSignal()
    progress = pyqtSignal(int)
    stopped = pyqtSignal()
    data_sig = pyqtSignal(str)

    def __init__(self, port: serial.Serial, command: str, num_bytes: int, tot_prog: int):
        super(Worker, self).__init__()
        self.port = port
        self.command = command
        self.num_bytes = num_bytes
        self.tot_prog = tot_prog

    def run(self):
        self.port.open()
        self.port.reset_input_buffer()
        self.port.write(self.command.encode())
        char = ""
        i = 0
        while char != "e":
            char = self.port.read(1).decode()
            if char == 'a':
                self.progress.emit(i+1)
            elif char == 's':
                self.stopped.emit()
                break
            i += 1
        if char == "s":
            return
        read = self.port.read(self.num_bytes).decode()
        self.port.close()
        self.finished.emit()
        self.data_sig.emit(read)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
