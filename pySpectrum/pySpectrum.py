###########################################################################
#
# -*- coding: utf-8 -*-
#
# Form implementation generated from reading ui file 'Main_win.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#
###########################################################################


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import QObject, QThread, pyqtSignal
from pyqtgraph import ImageItem, GraphicsLayoutWidget, mkPen
import serial
import serial.tools.list_ports
import numpy as np
import pickle
from wavelen2rgb import wavelen2rgb, Adjust_and_Scale
from PyQt5 import sip
import pyqtgraph.exporters
import os
from configparser import ConfigParser


# HELP: https://realpython.com/python-pyqt-qthread/  --> non dice tutto il necessario infatti:
# INPORTANTE!! la funzione 'run' non deve avere nessun parametro (oltre che self) altrimenti si sminchia tutto e si blocca il programma
# creo invece una classe Object con dei parametri che fisso all'inizio quando chiamo __init__
class Worker(QObject):

    finished_sig = pyqtSignal()
    progress_sig = pyqtSignal(int)
    stopped_sig = pyqtSignal()
    data_sig = pyqtSignal(str)

    def __init__(self, port: serial.Serial, command: str, num_bytes: int):
        super(Worker, self).__init__()
        self.port = port
        self.command = command
        self.num_bytes = num_bytes

    def run(self):
        self.port.open()
        self.port.reset_input_buffer()
        self.port.write(self.command.encode())
        char = ""
        i = 0
        while char != "e":
            char = self.port.read(1).decode()
            if char == 'a':
                self.progress_sig.emit(i+1)
            elif char == 's':
                self.stopped_sig.emit()
                break
            i += 1
        if char == "s":
            return
        read = self.port.read(self.num_bytes).decode()
        self.port.close()
        self.data_sig.emit(read)
        self.finished_sig.emit()


class TreeItem(QtWidgets.QTreeWidgetItem):

    bold_font = QtGui.QFont()
    bold_font.setBold(True)
    bold_font.setPointSize(10)

    italic_font = QtGui.QFont()
    italic_font.setItalic(True)
    italic_font.setPointSize(9)

    def __init__(self, parent, name, count, integration, gamma=1.5, as_back=False):
        super().__init__(parent)
        self._name = name
        self.count = count
        self.integration = integration
        self.gamma = gamma
        self._as_back = as_back

        self.setText(0, self._name)
        self.setFont(0, self.bold_font)

        self.count_item = QtWidgets.QTreeWidgetItem(self)
        self.count_item.setText(0, "Count")
        self.count_item.setText(1, str(self.count))
        self.count_item.setFont(0, self.italic_font)

        self.integ_item = QtWidgets.QTreeWidgetItem(self)
        self.integ_item.setText(0, "Integration")
        self.integ_item.setText(1, str(self.integration))
        self.integ_item.setFont(0, self.italic_font)

        self.gamma_item = QtWidgets.QTreeWidgetItem(self)
        self.gamma_item.setText(0, "Gamma")
        self.gamma_item.setText(1, str(self.gamma))
        self.gamma_item.setFont(0, self.italic_font)

        if self._as_back:
            self.setText(1, "*background*")
            self.setFont(1, self.italic_font)

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, val):
        self._name = val
        self.setText(0, self._name)

    def set_gamma(self, val):
        self.gamma = val/100.
        self.gamma_item.setText(1, str(self.gamma))

    @property
    def as_back(self):
        return self._as_back

    @as_back.setter
    def as_back(self, val: bool):
        self._as_back = val
        if val:
            self.setText(1, "*background*")
        else:
            self.setText(1, "")

    def setColor(self, color="#fff"):
        brush = QtGui.QBrush(QtGui.QColor(color))
        brush.setStyle(QtCore.Qt.SolidPattern)

        self.setBackground(2, brush)


class Ui_MainWindow(object):

    def report(self, msg):
        self.statusBar.showMessage(msg)

    def refresh_btn_action(self):
        self.com_list = []
        coms = serial.tools.list_ports.comports(True)
        if len(coms) == 0:
            self.report("No Port Found")
        else:
            self.port_combo.clear()
            self.report(f"{len(coms)} Port Found")
            for com in coms:
                device_info = ""
                if com.pid == self.TEENSY_PID and com.vid == self.TEENSY_VID:
                    device_info = " (Teensy 4.1)"

                self.port_combo.addItem(com.device + device_info)
                self.com_list.append(com.device)
            self.open_btn.setEnabled(True)

    def open_btn_action(self):
        if self.connected:
            self.connected = False
            self.open_btn.setText("Open")
            self.refresh_btn.setEnabled(True)
            self.port_combo.setEnabled(True)
            self.report(f"Closed connection with {self.COM}")

            self.measure_group.setEnabled(False)
            # self.background_group.setEnabled(False)
            self.graph_setting_group.setEnabled(False)
        else:
            self.COM = self.com_list[self.port_combo.currentIndex()]
            try:
                self.port = serial.Serial(self.COM, self.BAUDRATE)
            except serial.SerialException:
                self.report(f"Could not open port {self.COM}")
            else:
                self.connected = True
                self.port.close()
                self.report(f"Opened serial connection with port {self.COM} at {self.BAUDRATE} baudrate")
                self.open_btn.setText("Close")
                self.refresh_btn.setEnabled(False)
                self.port_combo.setEnabled(False)
                self.measure_group.setEnabled(True)
                # self.background_group.setEnabled(True)
                self.graph_setting_group.setEnabled(True)

    def set_measure_type(self, val: str):
        self.measure_type = val.lower()
        self.report(f"Setted measure type to {val}")

    def set_integration(self, val):
        self.integration = val
        # self.report(f"Integration = {val}")

    def set_measure(self, val):
        self.n_measure = val
        # self.report(f"Measure = {val}")

    def update_progress(self, value):
        self.progress.setValue(value)

    def start_btn_action(self):
        self.iter = 0
        self.progress.show()
        self.progress.setRange(0, self.n_measure)
        self.start_btn.setEnabled(False)
        self.com_group.setEnabled(False)
        self.measure_spin_box.setEnabled(False)
        self.integration_spin_box.setEnabled(False)
        self.radio_layout.setEnabled(False)
        self.gamma_slider.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.serial_msg(f"i{self.integration}", 1)
        self.serial_msg(f"n{self.n_measure}", 1)

        self.curr_data = np.zeros(self.pixels, dtype=np.float32)
        self.start_reading_thread()
    
    def serial_msg(self, command, n_byte=1):
        """ Send cammand to serial port and wait response """
        self.port.open()
        self.port.write(command.encode())
        self.port.flush()
        while self.port.inWaiting() < n_byte:
            pass
        self.port.reset_input_buffer()
        self.port.close()
        self.report(f"sended command {command}")

    def start_reading_thread(self):
        self.thread = QThread()
        self.worker = Worker(self.port, "m", self.pixels*3)
        self.worker.moveToThread(self.thread)
        self.thread.started.connect(self.worker.run)

        self.worker.finished_sig.connect(self.thread.quit)
        self.worker.finished_sig.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)

        if self.measure_type == "continued":
            self.thread.finished.connect(self.start_reading_thread)
        else:
            self.thread.finished.connect(self.handle_finish)

        self.worker.stopped_sig.connect(self.thread.quit)
        self.worker.stopped_sig.connect(self.worker.deleteLater)
        self.worker.stopped_sig.connect(self.thread.deleteLater)
        self.worker.stopped_sig.connect(self.handle_stop)

        self.worker.progress_sig.connect(self.update_progress)
        self.worker.finished_sig.connect(self.update_count_value)
        self.worker.data_sig.connect(self.receive_data)
        self.thread.start()

    def stop_btn_action(self):
        self.port.write("s".encode())
        if self.measure_type == "continued":
            self.thread.finished.disconnect(self.start_reading_thread)
            self.create_item()
            self.update_items_img_and_plot()
        else:
            self.thread.finished.disconnect(self.handle_finish)

    def update_count_value(self):
        self.count_value.setText(str(self.iter*self.n_measure))

    def handle_stop(self):
        self.port.close()
        self.report("Stopped measure")
        self.progress.setValue(0)
        self.progress.hide()
        self.com_group.setEnabled(True)
        self.measure_spin_box.setEnabled(True)
        self.integration_spin_box.setEnabled(True)
        self.radio_layout.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.start_btn.setEnabled(True)
        self.gamma_slider.setEnabled(True)

    def handle_finish(self):
        self.report("Completed")
        self.progress.setValue(0)
        self.progress.hide()
        self.com_group.setEnabled(True)
        self.measure_spin_box.setEnabled(True)
        self.integration_spin_box.setEnabled(True)
        self.radio_layout.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.start_btn.setEnabled(True)
        self.gamma_slider.setEnabled(True)

    def receive_data(self, raw):
        self.iter += 1
        raw_data = np.array([int(raw[i:i+3], 16) for i in range(0, len(raw), 3)], dtype=np.float32)
        if self.measure_type == "single":
            self.curr_data = raw_data
            # self.update_plot(self.curr_data-self.curr_background)
            # self.update_img(self.curr_data-self.curr_background)
            self.create_item()

        else:
            p = 0.05
            # media ponderata parametro
            if self.iter < 2:
                self.curr_data = raw_data
            else:
                self.curr_data = self.curr_data * (1.-p) + raw_data * p

            # media ponderata misure
            # self.curr_data = self.curr_data*(self.iter-1.)/self.iter + raw_data/self.iter

            # Media 2
            # if self.iter < 2:
            #     self.curr_data = raw_data
            # else:
            #     self.curr_data = (self.curr_data + raw_data) / 2
            if self.subtract_check_box.isChecked():
                self.update_plot(self.curr_data-self.curr_background)
                self.update_img(self.curr_data-self.curr_background)
            else:
                self.update_plot(self.curr_data)
                self.update_img(self.curr_data)

    def create_item(self):
        self.remove_probing()
        self.remove_compare()

        new_item = TreeItem(self.tree_view, "untitled", self.iter*self.n_measure, self.integration)
        try:
            self.gamma_slider.valueChanged.disconnect()
        except TypeError:
            pass

        for item in self.items:
            tree_item = item["tree_item"]
            tree_item.setSelected(False)
            tree_item.setExpanded(False)
            tree_item.setColor()

        self.items.append({
            "tree_item": new_item,
            "data": self.curr_data,
            "img": self.curr_img,
        })
        new_item.setExpanded(True)
        new_item.setSelected(True)
        new_item.setColor("#444")
        self.gamma_slider.setValue(int(new_item.gamma*100))
        self.gamma_slider.valueChanged.connect(new_item.set_gamma)
        self.gamma_slider.valueChanged.connect(self.update_img_slider)
        self.selected_item = self.tree_view.indexOfTopLevelItem(new_item)
        self.item_select_action(new_item, None)
        # print(self.selected_item)

    def item_select_action(self, item_obj, _):

        self.remove_probing()
        self.remove_compare()

        if item_obj.parent() is not None:
            item_obj = item_obj.parent()
        self.selected_item = self.tree_view.indexOfTopLevelItem(item_obj)
        try:
            self.gamma_slider.valueChanged.disconnect()
        except TypeError:
            pass
        for item in self.items:
            tree_item = item["tree_item"]
            if tree_item is not item_obj:
                tree_item.setSelected(False)
                tree_item.setExpanded(False)
                tree_item.setColor()
        item_obj.setSelected(True)
        item_obj.setExpanded(True)
        self.items[self.selected_item]['tree_item'].setColor("#444")

        self.gamma_slider.setValue(int(item_obj.gamma * 100))
        self.gamma_slider.valueChanged.connect(item_obj.set_gamma)
        self.gamma_slider.valueChanged.connect(self.update_img_slider)
        self.update_items_img_and_plot()
        # self.update_plot(self.items[self.selected_item]["data"]-self.curr_background)
        # self.update_img(self.items[self.selected_item]["data"]-self.curr_background, self.items[self.selected_item]["tree_item"].gamma)

    def update_img_slider(self, gamma):
        item = self.items[self.selected_item]
        if self.subtract_check_box.isChecked():
            self.update_img(item["data"]-self.curr_background, gamma/100.)
        else:
            self.update_img(item["data"], gamma / 100.)
        item["img"] = self.curr_img

    def update_plot(self, data):
        self.remove_probing()
        self.remove_compare()

        self.plot_area.clear()
        self.plot_area.plot(data, pen=mkPen("#444444", width=1.0))
        self.plot_area.setYRange(np.amin(data), np.amax(data))

    def update_img(self, data, gamma=1.5, update_view=True):
        _min = np.amin(data)
        _max = np.amax(data)

        intensity = np.array([(i-_min)/(_max-_min) for i in data], dtype=np.float32)
        img = np.zeros((self.pixels, 1, 3), np.float32)
        for i in range(self.pixels):
            # print(i)
            wav = i*(self.real_x_max-self.real_x_min)/self.pixels + self.real_x_min
            color, out_range = wavelen2rgb(wav, 255)
            if out_range:
                img[i][0] = np.power(np.ones(3)*intensity[i], gamma, dtype=np.float32)
            else:
                img[i][0] = np.power(np.array(color)*intensity[i], gamma, dtype=np.float32)
        self.curr_img = img
        if update_view:
            self.img_item.setImage(self.curr_img)

    def rename_btn_action(self):
        new_name = self.rename_val.text()
        if len(new_name) != 0 and len(self.items) != 0:
            self.items[self.selected_item]["tree_item"].name = new_name
        self.rename_val.setText("")

    def get_bound_line(self):
        self.remove_probing()
        self.remove_compare()

        self.low_vl = self.plot_area.addLine(x=100, movable=True, pen=mkPen("b", width=2, style=QtCore.Qt.DashLine), bounds=[0, self.pixels*0.94])
        self.low_vl.pen.setDashPattern([10, 10])
        self.low_vl.addMarker("|<", size=15)

        self.high_vl = self.plot_area.addLine(x=self.pixels * 0.97, movable=True, pen=mkPen("b", width=2, style=QtCore.Qt.DashLine),
                                              bounds=[self.pixels*0.06, self.pixels])
        self.high_vl.pen.setDashPattern([10, 10])
        self.high_vl.addMarker(">|", size=15)
        self.get_btn.setEnabled(False)
        self.set_btn.setEnabled(True)
        self.low_val.setEnabled(True)
        self.high_val.setEnabled(True)
        self.set_btn.setText("Set")

    def set_bound_line(self):
        y1 = self.low_val.text()
        y2 = self.high_val.text()

        x1 = self.low_vl.value()
        x2 = self.high_vl.value()
        if len(y1) != 0 and len(y2) != 0:
            # self.report(f"x1={x1}  x2={x2}  y1={y1}  y2={y2}")
            y1 = float(y1)
            y2 = float(y2)
            coeff = float(y2-y1)/(x2-x1)
            self.real_x_min = coeff*-x1 + y1
            self.real_x_max = coeff*(self.pixels-x1) + y1
            self.plot_area.removeItem(self.low_vl)
            self.plot_area.removeItem(self.high_vl)
            self.low_val.setText("")
            self.high_val.setText("")
            self.low_val.setEnabled(False)
            self.high_val.setEnabled(False)
            ticks = [[], []]
            sign = np.sign(self.real_x_max-self.real_x_min)
            _min_hundred = int(self.real_x_min/100 - 1*sign)*100
            _max_hundred = int(self.real_x_max/100 + 1*sign)*100

            for y_i in np.arange(_min_hundred, _max_hundred, self.grid_big_ticks*sign):
                x_i = (y_i-y1)/coeff + x1
                ticks[0].append((x_i, f"{y_i:.0f}"))

            for y_i in np.arange(_min_hundred, _max_hundred, self.grid_little_ticks*sign):
                x_i = (y_i-y1)/coeff + x1
                ticks[1].append((x_i, f"{y_i:.0f}"))
            # print(ticks)
            self.xaxis.setTicks(ticks)
            self.report(f"x1={x1}  x2={x2}  y1={y1}  y2={y2}, Correctly setted bounds {self.real_x_min} / {self.real_x_max}")

            for item in self.items:
                tree_item = item["tree_item"]
                if tree_item.isSelected():
                    self.update_img(item["data"]-self.curr_background, tree_item.gamma)
                    item["img"] = self.curr_img
                else:
                    self.update_img(item["data"]-self.curr_background, tree_item.gamma, update_view=False)
                    item["img"] = self.curr_img
            # Update config file
            conf_obj = ConfigParser()
            conf_obj.read("config.ini")
            conf_obj["AXISINFO"]["real_x_min"] = str(self.real_x_min)
            conf_obj["AXISINFO"]["real_x_max"] = str(self.real_x_max)
            with open("config.ini", "w") as conf_file:
                conf_obj.write(conf_file)

        else:
            self.plot_area.removeItem(self.low_vl)
            self.plot_area.removeItem(self.high_vl)
            self.report("Not setted correctly")
        self.get_btn.setEnabled(True)
        self.set_btn.setEnabled(False)

    def remove_btn_action(self):
        self.remove_probing()
        self.remove_compare()

        if len(self.items) > 0:
            root = self.tree_view.invisibleRootItem()
            root.removeChild(self.items[self.selected_item]["tree_item"])
            removed = self.items.pop(self.selected_item)
            if removed["tree_item"].as_back:
                self.background_item = -1
                self.curr_background = np.zeros(self.pixels, dtype=np.float32)
                self.update_items_img_and_plot()
                self.subtract_check_box.setChecked(False)
            if len(self.items) > 0:
                self.item_select_action(self.items[-1]["tree_item"], None)
            else:
                self.plot_area.clear()
                self.img_item.setImage(np.zeros((self.pixels, 1, 3)))
                self.plot_area.setYRange(0, self.max_read_value)
                self.select_rect = -1

    def toggle_grid_action(self, state):
        if state == 0:
            self.plot_area.showGrid(False, False, alpha=0.2)
        else:
            self.plot_area.showGrid(True, True, alpha=0.2)

    def set_background_action(self):
        if len(self.items) > 0:
            for item in self.items:
                if item["tree_item"] != self.items[self.selected_item]["tree_item"]:
                    item["tree_item"].as_back = False
                    self.update_items_img_and_plot()
                else:
                    item["tree_item"].as_back = True
                    self.background_item = self.selected_item
                    self.curr_background = item["data"]

    def update_items_img_and_plot(self):
        self.remove_probing()
        self.remove_compare()

        for item in self.items:
            tree_item = item["tree_item"]
            if tree_item.isSelected():
                if tree_item.as_back:
                    self.update_plot(item["data"])
                    self.update_img(item["data"], tree_item.gamma)
                else:
                    if self.subtract_check_box.isChecked():
                        self.update_plot(item["data"]-self.curr_background)
                        self.update_img(item["data"]-self.curr_background, tree_item.gamma)
                    else:
                        self.update_plot(item["data"])
                        self.update_img(item["data"], tree_item.gamma)
                item["img"] = self.curr_img
            else:
                if self.subtract_check_box.isChecked():
                    self.update_img(item["data"] - self.curr_background, tree_item.gamma, update_view=False)
                else:
                    self.update_img(item["data"], tree_item.gamma, update_view=False)
                item["img"] = self.curr_img

    def subtract_background_action(self, state):
        self.remove_probing()
        self.remove_compare()
        if state == 0:
            # self.curr_background = np.zeros(self.pixels, dtype=np.float32)
            self.update_items_img_and_plot()
        else:
            if self.background_item != -1:
                # self.curr_background = self.items[self.selected_item]["data"]
                self.update_items_img_and_plot()
            else:
                self.report("Choose BackGround measure")
                self.subtract_check_box.setChecked(False)

    def save_btn_action(self):
        self.remove_probing()
        self.remove_compare()

        if len(self.items) > 0:
            fileName, _ = QFileDialog.getSaveFileName(self.main_widget, "Salva Plot",
                                                      f"{self.items[self.selected_item]['tree_item'].name}.png",
                                                      "Images (*.png *.jpg)")
            if fileName:

                if fileName[-4:].lower() not in [".png", ".jpg"]:
                    fileName = fileName+".png"

                # quando si esporta un GraphicLayoutWidget quello che bisogan esportare è il parametro 'ci' che significa 'central item'
                exporter = pyqtgraph.exporters.ImageExporter(self.view.ci)
                exporter.params["width"] = 1920
                exporter.export(fileName)
                self.report("Plot Saved correctly")
            else:
                self.report("Not saved")
        else:
            self.report("No plot to Export")

    def compare_btn_action(self):
        self.remove_probing()
        if self.comparing:
            self.comparing = False
            self.update_items_img_and_plot()
            self.gamma_slider.setEnabled(True)
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap("icons/compare_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.compare_btn.setIcon(icon1)

            for item in self.comparing_item:
                item["tree_item"].setColor("#fff")
                item["tree_item"].setDisabled(False)
            self.comparing_item = []
            self.item_select_action(self.items[self.selected_item]["tree_item"], None)
            self.tree_view.itemClicked.disconnect(self.select_item_to_compare)
            self.tree_view.itemDoubleClicked.connect(self.item_select_action)
            self.tree_view.itemClicked.connect(self.item_select_action)

        else:
            if len(self.items) > 1:
                self.comparing = True
                self.gamma_slider.setEnabled(False)
                icon1 = QtGui.QIcon()
                icon1.addPixmap(QtGui.QPixmap("icons/compare_icon_del.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.compare_btn.setIcon(icon1)

                self.tree_view.itemDoubleClicked.disconnect(self.item_select_action)
                self.tree_view.itemClicked.disconnect(self.item_select_action)

                self.tree_view.itemClicked.connect(self.select_item_to_compare)
                if self.items[self.selected_item]["tree_item"].as_back:
                    self.subtract_check_box.setChecked(False)
                self.items[self.selected_item]["tree_item"].setDisabled(True)
                self.items[self.selected_item]["tree_item"].setColor(self.palette[0])
                self.comparing_item.append(self.items[self.selected_item])
            else:
                self.report("Only one plot to show")

    def remove_compare(self):
        if self.comparing:
            self.comparing = False
            self.gamma_slider.setEnabled(True)
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap("icons/compare_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.compare_btn.setIcon(icon1)

            for item in self.comparing_item:
                item["tree_item"].setColor("#fff")
                item["tree_item"].setDisabled(False)
            self.comparing_item = []
            self.item_select_action(self.items[self.selected_item]["tree_item"], None)
            self.tree_view.itemClicked.disconnect(self.select_item_to_compare)
            self.tree_view.itemDoubleClicked.connect(self.item_select_action)
            self.tree_view.itemClicked.connect(self.item_select_action)

    def select_item_to_compare(self, item_selected, _):
        # curr_item = self.items[self.selected_item]
        sel_item_index = self.tree_view.indexOfTopLevelItem(item_selected)
        if item_selected not in [elem["tree_item"] for elem in self.comparing_item]:
            # print(len(self.comparing_item))
            item_selected.setColor(self.palette[len(self.comparing_item)])
            item_selected.setDisabled(True)
            self.comparing_item.append(self.items[sel_item_index])

            sub = np.zeros(self.pixels)
            if self.subtract_check_box.isChecked():
                sub = self.curr_background
            self.plot_area.clear()
            _min = np.amin(self.comparing_item[0]["data"]-sub)
            _max = np.amax(self.comparing_item[0]["data"]-sub)
            sub = np.zeros(self.pixels)

            new_img = np.zeros((self.pixels, len(self.comparing_item), 3), dtype=np.float32)

            for i, item in enumerate(self.comparing_item):
                self.plot_area.plot(item["data"]-sub, pen=mkPen(self.palette[i]))
                _min = min(_min, np.amin(item["data"]-sub))
                _max = max(_max, np.amax(item["data"]-sub))
                self.plot_area.setYRange(_min, _max)
                new_img[:, i] = item["img"][:, 0]

            self.img_item.setImage(new_img)

            # print(self.items[sel_item_index]["tree_item"]==item_obj)
            # curr_item["tree_item"].setDisabled(False)
            # if self.items[sel_item]["tree_item"].as_back:
            #     self.subtract_check_box.setChecked(False)
            # new_img = np.zeros((self.pixels, 3, 3), dtype=np.float32)
            # new_img[:, 0] = curr_item["img"][:, 0]
            # new_img[:, 1] = np.ones((self.pixels, 1, 3))[:, 0]
            # new_img[:, 2] = self.items[sel_item]["img"][:, 0]
            # self.img_item.setImage(new_img)
            #
            # self.plot_area.clear()
            # sub = np.zeros(self.pixels)
            # if self.subtract_check_box.isChecked():
            #     sub = self.curr_background
            # data1 = curr_item["data"]-sub
            # data2 = self.items[sel_item]["data"]-sub
            #
            # self.plot_area.plot(data1, pen=mkPen("#0e58cf"))
            # self.plot_area.plot(data2, pen=mkPen("#007308"))
            # self.plot_area.setYRange(min(np.amin(data1), np.amin(data2)), max(np.amax(data1), np.amax(data2)))
            #
            # self.tree_view.itemClicked.disconnect(self.select_item_to_compare)
            #
            # self.tree_view.itemDoubleClicked.connect(self.item_select_action)
            # self.tree_view.itemClicked.connect(self.item_select_action)
        else:
            pass  # TODO: rimuovi un elemento e aggiorna i grafici e i colori

    def probe_btn_action(self):
        if self.probing:
            self.plot_area.removeItem(self.probe_vl)
            self.probing = False
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap("icons/probe_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.probe_btn.setIcon(icon1)
            self.report("End Probing")
            # self.probe_btn.clicked.connect(self.probe_btn_action)
        else:
            if len(self.items) > 0:
                self.probing = True
                # self.probe_btn.clicked.disconnect()
                icon1 = QtGui.QIcon()
                icon1.addPixmap(QtGui.QPixmap("icons/probe_icon_del.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.probe_btn.setIcon(icon1)
                self.probe_vl = self.plot_area.addLine(x=self.pixels/2,
                                                       movable=True,
                                                       pen=mkPen("#a60228", width=2),
                                                       hoverPen=mkPen("#a60228", width=2),
                                                       bounds=[0, self.pixels])
                self.probe_vl.addMarker(">|<", size=15, position=0.5)
                self.report_probe_pos(self.probe_vl.value())
                self.probe_vl.sigDragged.connect(self.report_probe_pos)

    def report_probe_pos(self, _):
        real_pos = self.probe_vl.value()*(self.real_x_max-self.real_x_min)/self.pixels + self.real_x_min
        self.report(f"Probe = {real_pos:.2f}")

    def remove_probing(self):
        if self.probing:
            self.plot_area.removeItem(self.probe_vl)
            self.probing = False
            icon1 = QtGui.QIcon()
            icon1.addPixmap(QtGui.QPixmap("icons/probe_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            self.probe_btn.setIcon(icon1)
            self.report("End Probing")

    def initialize_config(self):
        if os.path.exists("config.ini"):
            conf_obj = ConfigParser()
            conf_obj.read("config.ini")
            axis_info = conf_obj["AXISINFO"]
            self.real_x_min = float(axis_info["real_x_min"])
            self.real_x_max = float(axis_info["real_x_max"])
            grid_info = conf_obj["GRIDINFO"]
            self.grid_big_ticks = int(grid_info["grid_big_ticks"])
            self.grid_little_ticks = int(grid_info["grid_little_ticks"])
        else:
            conf_obj = ConfigParser()
            conf_obj["AXISINFO"] = {
                "real_x_min": self.real_x_min,
                "real_x_max": self.real_x_max,
            }
            conf_obj["GRIDINFO"] = {
                "grid_big_ticks": self.grid_big_ticks,
                "grid_little_ticks": self.grid_little_ticks
            }
            with open("config.ini", "w") as conf_file:
                conf_obj.write(conf_file)

    def update_axis_tick(self):
        ticks = [[], []]
        sign = np.sign(self.real_x_max - self.real_x_min)
        _min_hundred = int(self.real_x_min / 100 - 1*sign) * 100
        _max_hundred = int(self.real_x_max / 100 + 1*sign) * 100
        coeff = float(self.real_x_max - self.real_x_min)/self.pixels
        for y_i in np.arange(_min_hundred, _max_hundred, 100*sign):
            x_i = (y_i - self.real_x_min) / coeff
            ticks[0].append((x_i, f"{y_i:.0f}"))

        for y_i in np.arange(_min_hundred, _max_hundred, 25*sign):
            x_i = (y_i - self.real_x_min) / coeff
            ticks[1].append((x_i, f"{y_i:.0f}"))

        self.xaxis.setTicks(ticks)

    def export_btn_action(self):
        self.remove_probing()
        self.remove_compare()

        if len(self.items) > 0:
            fileName, _ = QFileDialog.getSaveFileName(self.main_widget, "Salva Plot",
                                                      f"{self.items[self.selected_item]['tree_item'].name}.pkl",
                                                      "Pickle(*.pkl)")
            if fileName:

                if fileName[-4:].lower() != ".pkl":
                    fileName = fileName+".pkl"
                item = self.items[self.selected_item]
                data_to_export = {
                    "name": item["tree_item"].name,
                    "count": item["tree_item"].count,
                    "integration": item["tree_item"].integration,
                    "gamma": item["tree_item"].gamma,
                    "data": item["data"],
                    "img": item["img"],

                }
                file = open(fileName, 'wb')
                pickle.dump(data_to_export, file)
                file.close()
                self.report(f"Eported measure as {fileName}")
            else:
                self.report("Not exported")
        else:
            self.report("No measure to Export")

    def import_btn_action(self):

        self.remove_probing()
        self.remove_compare()

        fileName, _ = QFileDialog.getOpenFileName(self.main_widget, "Open File",
                                                  os.getcwd(),
                                                  "Pickle (*.pkl)")

        if fileName and fileName[-4:].lower() == ".pkl":

            file = open(fileName, 'rb')
            imported_data = pickle.load(file)
            file.close()

            new_item = TreeItem(self.tree_view, imported_data["name"], imported_data["count"], imported_data["integration"])
            new_item.gamma = imported_data["gamma"]
            try:
                self.gamma_slider.valueChanged.disconnect()
            except TypeError:
                pass

            for item in self.items:
                tree_item = item["tree_item"]
                tree_item.setSelected(False)
                tree_item.setExpanded(False)
                tree_item.setColor()

            self.items.append({
                "tree_item": new_item,
                "data": imported_data["data"],
                "img": imported_data["img"],
            })
            new_item.setExpanded(True)
            new_item.setSelected(True)
            new_item.setColor("#444")
            self.gamma_slider.setValue(int(new_item.gamma * 100))
            self.gamma_slider.valueChanged.connect(new_item.set_gamma)
            self.gamma_slider.valueChanged.connect(self.update_img_slider)
            self.selected_item = self.tree_view.indexOfTopLevelItem(new_item)
            self.item_select_action(new_item, None)

        else:
            self.report(f"Can't import {fileName}")

    def put_up_btn_action(self):
        pass
    # -----------------------------------------------------------------------------------------------------------------------
    def setupUi(self, MainWindow):

        self.pixels = 3648
        self.max_read_value = 4096
        self.connected = False
        self.port = None
        self.com_list = None
        self.COM = None
        self.measure_type = "single"
        self.thread = None
        self.integration = 0
        self.n_measure = 0

        self.curr_data = None
        self.curr_raw_data = None
        self.curr_img = None
        self.iter = 0

        self.BAUDRATE = 115200
        self.TEENSY_VID = 5824
        self.TEENSY_PID = 1155
        
        self.selected_item = -1
        self.background_item = -1
        self.curr_background = np.zeros(self.pixels, dtype=np.float32)
        self.items = []

        self.bound_low = 0
        self.bound_high = 0

        self.real_x_min = 0
        self.real_x_max = self.pixels

        self.grid_big_ticks = 10
        self.grid_little_ticks = 50

        self.probing = False
        self.comparing = False
        self.comparing_item = []

        self.initialize_config()
        self.palette = ["#283248", "#59A38C", "#DC9556", "#C16B4A", "#247f77", "#4ac156", "#dfc42a", "#e53b3c"]
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1689, 700)
        font = QtGui.QFont()
        font.setPointSize(9)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/Spectruino.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setAutoFillBackground(False)
        MainWindow.showMaximized()
        self.main_widget = QtWidgets.QWidget(MainWindow)
        self.main_widget.setObjectName("main_widget")
        self.main_layout = QtWidgets.QGridLayout(self.main_widget)
        self.main_layout.setObjectName("main_layout")
        # Status Bar
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)

        # PLOT AREA
        self.plot_frame = QtWidgets.QFrame(self.main_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.plot_frame.sizePolicy().hasHeightForWidth())

        self.plot_frame.setSizePolicy(sizePolicy)
        self.plot_frame.setFrameShape(QtWidgets.QFrame.Box)
        self.plot_frame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.plot_frame.setObjectName("plot_frame")

        self.plot_frame_layout = QtWidgets.QGridLayout(self.plot_frame)
        self.plot_frame_layout.setObjectName("plot_frame_layout")

        self.view = GraphicsLayoutWidget(self.plot_frame)
        self.view.setBackground("w")

        self.plot_area = self.view.addPlot(0, 0)
        self.plot_area.disableAutoRange()
        self.plot_area.setMouseEnabled(x=False, y=False)
        self.plot_area.hideButtons()
        self.plot_area.setYRange(0, self.max_read_value, padding=False)
        self.plot_area.vb.setLimits(xMin=0, xMax=self.pixels, yMin=-self.max_read_value, yMax=self.max_read_value)

        self.xaxis = self.plot_area.getAxis("bottom")
        self.yaxis = self.plot_area.getAxis("left")
        self.xaxis.setTextPen("k")
        self.xaxis.setPen("k")
        self.yaxis.setTextPen("k")
        self.yaxis.setPen("k")
        self.plot_area.showGrid(True, True, alpha=0.2)
        self.update_axis_tick()

        self.img_area = self.view.addPlot(1, 0)
        self.img_area.setMaximumSize(1000000, 50)
        self.img_area.setXLink(self.plot_area)
        self.img_area.setXRange(0, self.pixels, padding=False)

        self.img_item = ImageItem()
        self.img_area.addItem(self.img_item)
        self.img_area.showAxis("bottom", show=False)
        self.img_area.showAxis("left", show=False)
        self.img_area.setMouseEnabled(x=False, y=False)
        self.img_area.hideButtons()
        # img = np.zeros((self.pixels, 3, 3))
        # img[:, 1] = np.tile(np.array([1., 0, 0]), (self.pixels, 1))
        self.img_item.setImage(np.zeros((self.pixels, 1, 3)))

        self.plot_frame_layout.addWidget(self.view, 0, 0, 1, 1)
        self.main_layout.addWidget(self.plot_frame, 1, 0, 1, 1)

        # TOP CONTROL
        self.top_control_layout = QtWidgets.QHBoxLayout()
        self.top_control_layout.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.top_control_layout.setObjectName("top_control_layout")

        # Communication group
        self.com_group = QtWidgets.QGroupBox(self.main_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.com_group.sizePolicy().hasHeightForWidth())
        self.com_group.setSizePolicy(sizePolicy)
        self.com_group.setMinimumSize(QtCore.QSize(300, 0))
        self.com_group.setMaximumSize(QtCore.QSize(16777215, 100))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.com_group.setFont(font)
        self.com_group.setObjectName("com_group")
        self.gridLayout = QtWidgets.QGridLayout(self.com_group)
        self.gridLayout.setObjectName("gridLayout")
        self.port_grid_layout = QtWidgets.QGridLayout()
        self.port_grid_layout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.port_grid_layout.setObjectName("port_grid_layout")
        self.port_label = QtWidgets.QLabel(self.com_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.port_label.sizePolicy().hasHeightForWidth())
        self.port_label.setSizePolicy(sizePolicy)
        self.port_label.setSizeIncrement(QtCore.QSize(0, 0))
        self.port_label.setBaseSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.port_label.setFont(font)
        self.port_label.setTextFormat(QtCore.Qt.AutoText)
        self.port_label.setAlignment(QtCore.Qt.AlignCenter)
        self.port_label.setWordWrap(True)
        self.port_label.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.port_label.setObjectName("port_label")
        self.port_grid_layout.addWidget(self.port_label, 0, 0, 1, 1)
        # Port combo
        self.port_combo = QtWidgets.QComboBox(self.com_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.port_combo.sizePolicy().hasHeightForWidth())
        self.port_combo.setSizePolicy(sizePolicy)
        self.port_combo.setMinimumSize(QtCore.QSize(150, 25))
        self.port_combo.setMaximumSize(QtCore.QSize(150, 16777215))
        self.port_combo.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.port_combo.setAutoFillBackground(False)
        self.port_combo.setCurrentText("...")
        self.port_grid_layout.addWidget(self.port_combo, 1, 0, 1, 1)
        self.gridLayout.addLayout(self.port_grid_layout, 0, 0, 1, 1)
        # refresh btn
        self.refresh_btn = QtWidgets.QPushButton(self.com_group)
        self.refresh_btn.clicked.connect(self.refresh_btn_action)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.refresh_btn.sizePolicy().hasHeightForWidth())
        self.refresh_btn.setSizePolicy(sizePolicy)
        self.refresh_btn.setMaximumSize(QtCore.QSize(80, 16777215))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.refresh_btn.setFont(font)
        self.refresh_btn.setObjectName("refresh_btn")
        self.gridLayout.addWidget(self.refresh_btn, 0, 1, 1, 1)
        self.open_btn = QtWidgets.QPushButton(self.com_group)
        self.open_btn.clicked.connect(self.open_btn_action)
        self.open_btn.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.open_btn.sizePolicy().hasHeightForWidth())
        self.open_btn.setSizePolicy(sizePolicy)
        self.open_btn.setMaximumSize(QtCore.QSize(80, 16777215))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.open_btn.setFont(font)
        self.open_btn.setObjectName("open_btn")
        self.gridLayout.addWidget(self.open_btn, 0, 2, 1, 1)
        self.top_control_layout.addWidget(self.com_group)

        # Measure Group
        self.measure_group = QtWidgets.QGroupBox(self.main_widget)
        self.measure_group.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.measure_group.sizePolicy().hasHeightForWidth())
        self.measure_group.setSizePolicy(sizePolicy)
        self.measure_group.setMaximumSize(QtCore.QSize(16777215, 100))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.measure_group.setFont(font)
        self.measure_group.setObjectName("measure_group")
        self.measure_grup_layout = QtWidgets.QGridLayout(self.measure_group)
        self.measure_grup_layout.setObjectName("measure_grup_layout")
        self.radio_layout = QtWidgets.QVBoxLayout()
        self.radio_layout.setObjectName("radio_layout")
        self.single_radio = QtWidgets.QRadioButton(self.measure_group)
        self.single_radio.toggled.connect(lambda: self.set_measure_type("single"))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.single_radio.setFont(font)
        self.single_radio.setChecked(True)
        self.single_radio.setObjectName("single_radio")
        self.radio_group = QtWidgets.QButtonGroup(MainWindow)
        self.radio_group.setObjectName("radio_group")
        self.radio_group.addButton(self.single_radio)
        self.radio_layout.addWidget(self.single_radio)
        self.continued_radio = QtWidgets.QRadioButton(self.measure_group)
        self.continued_radio.toggled.connect(lambda: self.set_measure_type("continued"))
        self.continued_radio.setEnabled(True)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.continued_radio.setFont(font)
        self.continued_radio.setChecked(False)
        self.continued_radio.setObjectName("continued_radio")
        self.radio_group.addButton(self.continued_radio)
        self.radio_layout.addWidget(self.continued_radio)
        self.measure_grup_layout.addLayout(self.radio_layout, 0, 2, 1, 1)

        # stop btn
        self.stop_btn = QtWidgets.QPushButton(self.measure_group)
        self.stop_btn.setEnabled(False)
        self.stop_btn.clicked.connect(self.stop_btn_action)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stop_btn.sizePolicy().hasHeightForWidth())
        self.stop_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.stop_btn.setFont(font)
        self.stop_btn.setFlat(False)
        self.stop_btn.setObjectName("stop_btn")
        self.measure_grup_layout.addWidget(self.stop_btn, 0, 4, 1, 1)
        self.count_frame = QtWidgets.QFrame(self.measure_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.count_frame.sizePolicy().hasHeightForWidth())
        self.count_frame.setSizePolicy(sizePolicy)
        self.count_frame.setMinimumSize(QtCore.QSize(70, 0))
        self.count_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.count_frame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.count_frame.setObjectName("count_frame")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.count_frame)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.count_value = QtWidgets.QLabel(self.count_frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.count_value.setFont(font)
        self.count_value.setAlignment(QtCore.Qt.AlignCenter)
        self.count_value.setObjectName("count_value")
        self.gridLayout_4.addWidget(self.count_value, 2, 0, 1, 1)
        self.count_label = QtWidgets.QLabel(self.count_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.count_label.sizePolicy().hasHeightForWidth())
        self.count_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.count_label.setFont(font)
        self.count_label.setAlignment(QtCore.Qt.AlignCenter)
        self.count_label.setObjectName("count_label")
        self.gridLayout_4.addWidget(self.count_label, 1, 0, 1, 1)
        self.measure_grup_layout.addWidget(self.count_frame, 0, 5, 1, 1)
        # start btn
        self.start_btn = QtWidgets.QPushButton(self.measure_group)
        self.start_btn.clicked.connect(self.start_btn_action)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.start_btn.sizePolicy().hasHeightForWidth())
        self.start_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.start_btn.setFont(font)
        self.start_btn.setFlat(False)
        self.start_btn.setObjectName("start_btn")
        self.measure_grup_layout.addWidget(self.start_btn, 0, 3, 1, 1)
        self.measure_grid_layout = QtWidgets.QGridLayout()
        self.measure_grid_layout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.measure_grid_layout.setObjectName("measure_grid_layout")
        self.measure_label = QtWidgets.QLabel(self.measure_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.measure_label.sizePolicy().hasHeightForWidth())
        self.measure_label.setSizePolicy(sizePolicy)
        self.measure_label.setMinimumSize(QtCore.QSize(120, 0))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.measure_label.setFont(font)
        self.measure_label.setObjectName("measure_label")
        self.measure_grid_layout.addWidget(self.measure_label, 0, 0, 1, 1)

        # measure spin box
        self.measure_spin_box = QtWidgets.QSpinBox(self.measure_group)
        self.n_measure = self.measure_spin_box.value()
        self.measure_spin_box.valueChanged.connect(self.set_measure)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.measure_spin_box.sizePolicy().hasHeightForWidth())
        self.measure_spin_box.setSizePolicy(sizePolicy)
        self.measure_spin_box.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.measure_spin_box.setFont(font)
        self.measure_spin_box.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.measure_spin_box.setSuffix("")
        self.measure_spin_box.setPrefix("")
        self.measure_spin_box.setMaximum(99999)
        self.measure_spin_box.setStepType(QtWidgets.QAbstractSpinBox.DefaultStepType)
        self.measure_spin_box.setProperty("value", 1)
        self.measure_spin_box.setObjectName("measure_spin_box")

        self.measure_grid_layout.addWidget(self.measure_spin_box, 0, 1, 1, 1)
        self.integration_label = QtWidgets.QLabel(self.measure_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.integration_label.sizePolicy().hasHeightForWidth())
        self.integration_label.setSizePolicy(sizePolicy)
        self.integration_label.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.integration_label.setFont(font)
        self.integration_label.setObjectName("integration_label")
        self.measure_grid_layout.addWidget(self.integration_label, 1, 0, 1, 1)

        # integration spin box
        self.integration_spin_box = QtWidgets.QSpinBox(self.measure_group)
        self.integration = self.measure_spin_box.value()
        self.integration_spin_box.valueChanged.connect(self.set_integration)

        font = QtGui.QFont()
        font.setPointSize(10)
        self.integration_spin_box.setFont(font)
        self.integration_spin_box.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.integration_spin_box.setReadOnly(False)
        self.integration_spin_box.setMaximum(99999)
        self.integration_spin_box.setProperty("value", 100)
        self.integration_spin_box.setObjectName("integration_spin_box")
        self.measure_grid_layout.addWidget(self.integration_spin_box, 1, 1, 1, 1)
        self.measure_grid_layout.setColumnMinimumWidth(0, 120)
        self.measure_grid_layout.setColumnMinimumWidth(1, 100)
        self.measure_grup_layout.addLayout(self.measure_grid_layout, 0, 0, 1, 1)
        self.v_sep1 = QtWidgets.QFrame(self.measure_group)
        self.v_sep1.setMinimumSize(QtCore.QSize(10, 0))
        self.v_sep1.setFrameShape(QtWidgets.QFrame.VLine)
        self.v_sep1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.v_sep1.setObjectName("v_sep1")
        self.measure_grup_layout.addWidget(self.v_sep1, 0, 1, 1, 1)
        self.top_control_layout.addWidget(self.measure_group)

        # Background Group
        self.background_group = QtWidgets.QGroupBox(self.main_widget)
        # self.background_group.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.background_group.sizePolicy().hasHeightForWidth())
        self.background_group.setSizePolicy(sizePolicy)
        self.background_group.setMinimumSize(QtCore.QSize(0, 100))
        self.background_group.setObjectName("background_group")
        self.background_group_layout = QtWidgets.QHBoxLayout(self.background_group)
        self.background_group_layout.setObjectName("background_group_layout")
        self.background_btn = QtWidgets.QPushButton(self.background_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.background_btn.sizePolicy().hasHeightForWidth())

        # background btn
        self.background_btn.setSizePolicy(sizePolicy)
        self.background_btn.clicked.connect(self.set_background_action)
        self.background_btn.setMinimumSize(QtCore.QSize(130, 0))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.background_btn.setFont(font)
        self.background_btn.setObjectName("background_btn")
        self.background_group_layout.addWidget(self.background_btn)
        self.subtract_check_box = QtWidgets.QCheckBox(self.background_group)
        self.subtract_check_box.stateChanged.connect(self.subtract_background_action)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.subtract_check_box.sizePolicy().hasHeightForWidth())
        self.subtract_check_box.setSizePolicy(sizePolicy)
        self.subtract_check_box.setMinimumSize(QtCore.QSize(40, 0))
        self.subtract_check_box.setObjectName("subtract_check_box")
        self.background_group_layout.addWidget(self.subtract_check_box)
        self.top_control_layout.addWidget(self.background_group)

        # GRAPH SETTING GROUP
        self.graph_setting_group = QtWidgets.QGroupBox(self.main_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(100)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.graph_setting_group.sizePolicy().hasHeightForWidth())
        self.graph_setting_group.setSizePolicy(sizePolicy)
        self.graph_setting_group.setMinimumSize(QtCore.QSize(400, 100))
        self.graph_setting_group.setObjectName("graph_setting_group")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.graph_setting_group)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.low_ref_label = QtWidgets.QLabel(self.graph_setting_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.low_ref_label.sizePolicy().hasHeightForWidth())
        self.low_ref_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.low_ref_label.setFont(font)
        self.low_ref_label.setObjectName("low_ref_label")
        self.verticalLayout.addWidget(self.low_ref_label)
        self.high_ref_label = QtWidgets.QLabel(self.graph_setting_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.high_ref_label.sizePolicy().hasHeightForWidth())
        self.high_ref_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.high_ref_label.setFont(font)
        self.high_ref_label.setObjectName("high_ref_label")
        self.verticalLayout.addWidget(self.high_ref_label)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")

        # low val
        self.low_val = QtWidgets.QLineEdit(self.graph_setting_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.low_val.sizePolicy().hasHeightForWidth())
        self.low_val.setSizePolicy(sizePolicy)
        self.low_val.setMinimumSize(QtCore.QSize(50, 0))
        self.low_val.setObjectName("low_val")
        self.verticalLayout_3.addWidget(self.low_val)
        self.horizontalLayout.addLayout(self.verticalLayout_3)

        # high val
        self.high_val = QtWidgets.QLineEdit(self.graph_setting_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.high_val.sizePolicy().hasHeightForWidth())
        self.high_val.setSizePolicy(sizePolicy)
        self.high_val.setMinimumSize(QtCore.QSize(50, 0))
        self.high_val.setObjectName("high_val")
        self.verticalLayout_3.addWidget(self.high_val)

        self.low_val.setEnabled(False)
        self.high_val.setEnabled(False)

        # get btn
        self.get_btn = QtWidgets.QPushButton(self.graph_setting_group)
        self.get_btn.clicked.connect(self.get_bound_line)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.get_btn.sizePolicy().hasHeightForWidth())
        self.get_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.get_btn.setFont(font)
        self.get_btn.setObjectName("get_btn")
        self.horizontalLayout.addWidget(self.get_btn)

        # set btn
        self.set_btn = QtWidgets.QPushButton(self.graph_setting_group)
        self.set_btn.clicked.connect(self.set_bound_line)
        self.set_btn.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.set_btn.sizePolicy().hasHeightForWidth())
        self.set_btn.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.set_btn.setFont(font)
        self.set_btn.setObjectName("set_btn")
        self.horizontalLayout.addWidget(self.set_btn)
        self.grid_toggle_check_box = QtWidgets.QCheckBox(self.graph_setting_group)
        self.grid_toggle_check_box.setObjectName("grid_toggle_check_box")
        self.grid_toggle_check_box.setChecked(True)
        self.grid_toggle_check_box.stateChanged.connect(self.toggle_grid_action)
        self.horizontalLayout.addWidget(self.grid_toggle_check_box)
        self.top_control_layout.addWidget(self.graph_setting_group)

        # spacer
        spacerItem = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.top_control_layout.addItem(spacerItem)
        self.main_layout.addLayout(self.top_control_layout, 0, 0, 1, 2)

        # Control Frame
        self.control_frame = QtWidgets.QFrame(self.main_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.control_frame.sizePolicy().hasHeightForWidth())
        self.control_frame.setSizePolicy(sizePolicy)
        self.control_frame.setFrameShape(QtWidgets.QFrame.Box)
        self.control_frame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.control_frame.setObjectName("control_frame")
        self.control_frame_layout = QtWidgets.QVBoxLayout(self.control_frame)
        self.control_frame_layout.setObjectName("control_frame_layout")
        self.rename_layout = QtWidgets.QHBoxLayout()
        self.rename_layout.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.rename_layout.setObjectName("rename_layout")
        self.rename_label = QtWidgets.QLabel(self.control_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rename_label.sizePolicy().hasHeightForWidth())
        self.rename_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.rename_label.setFont(font)
        self.rename_label.setObjectName("rename_label")
        self.rename_layout.addWidget(self.rename_label)

        # rename value
        self.rename_val = QtWidgets.QLineEdit(self.control_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rename_val.sizePolicy().hasHeightForWidth())
        self.rename_val.setSizePolicy(sizePolicy)
        self.rename_val.setMaximumSize(QtCore.QSize(90, 16777215))
        self.rename_val.setObjectName("rename_val")
        self.rename_layout.addWidget(self.rename_val)
        self.rename_btn = QtWidgets.QPushButton(self.control_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rename_btn.sizePolicy().hasHeightForWidth())

        # rename btn
        self.rename_btn.setSizePolicy(sizePolicy)
        self.rename_btn.clicked.connect(self.rename_btn_action)
        self.rename_btn.setObjectName("rename_btn")
        self.rename_layout.addWidget(self.rename_btn)
        self.empy_btn_1 = QtWidgets.QPushButton(self.control_frame)
        self.empy_btn_1.setEnabled(False)
        self.empy_btn_1.setText("")
        self.empy_btn_1.setFlat(True)
        self.empy_btn_1.setObjectName("empy_btn_1")
        self.rename_layout.addWidget(self.empy_btn_1)
        self.control_frame_layout.addLayout(self.rename_layout)
        self.h_sep1 = QtWidgets.QFrame(self.control_frame)
        self.h_sep1.setFrameShape(QtWidgets.QFrame.HLine)
        self.h_sep1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.h_sep1.setObjectName("h_sep1")
        self.control_frame_layout.addWidget(self.h_sep1)

        # control button layout
        self.ctrl_btns_layout = QtWidgets.QHBoxLayout()
        self.ctrl_btns_layout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.ctrl_btns_layout.setObjectName("ctrl_btns_layout")
        self.remove_btn = QtWidgets.QPushButton(self.control_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.remove_btn.sizePolicy().hasHeightForWidth())
        self.remove_btn.setSizePolicy(sizePolicy)
        self.remove_btn.setMinimumSize(QtCore.QSize(40, 40))
        self.remove_btn.setMaximumSize(QtCore.QSize(40, 40))
        self.remove_btn.setToolTipDuration(-1)
        self.remove_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/remove_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.remove_btn.setIcon(icon1)
        self.remove_btn.setIconSize(QtCore.QSize(35, 35))
        self.remove_btn.setObjectName("remove_btn")
        self.remove_btn.clicked.connect(self.remove_btn_action)

        self.ctrl_btns_layout.addWidget(self.remove_btn)

        # compare btn
        self.compare_btn = QtWidgets.QPushButton(self.control_frame)
        self.compare_btn.clicked.connect(self.compare_btn_action)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.compare_btn.sizePolicy().hasHeightForWidth())
        self.compare_btn.setSizePolicy(sizePolicy)
        self.compare_btn.setMinimumSize(QtCore.QSize(40, 40))
        self.compare_btn.setMaximumSize(QtCore.QSize(40, 40))
        self.compare_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/compare_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.compare_btn.setIcon(icon1)
        self.compare_btn.setIconSize(QtCore.QSize(35, 35))
        self.compare_btn.setObjectName("compare_btn")
        self.ctrl_btns_layout.addWidget(self.compare_btn)

        # probe btn
        self.probe_btn = QtWidgets.QPushButton(self.control_frame)
        self.probe_btn.clicked.connect(self.probe_btn_action)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.probe_btn.sizePolicy().hasHeightForWidth())
        self.probe_btn.setSizePolicy(sizePolicy)
        self.probe_btn.setMinimumSize(QtCore.QSize(40, 40))
        self.probe_btn.setMaximumSize(QtCore.QSize(40, 40))
        self.probe_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/probe_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.probe_btn.setIcon(icon1)
        self.probe_btn.setIconSize(QtCore.QSize(35, 35))
        self.probe_btn.setObjectName("probe_btn")
        self.ctrl_btns_layout.addWidget(self.probe_btn)

        # put_up btn
        self.put_up_btn = QtWidgets.QPushButton(self.control_frame)
        self.put_up_btn.clicked.connect(self.put_up_btn_action)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.put_up_btn.sizePolicy().hasHeightForWidth())
        self.put_up_btn.setSizePolicy(sizePolicy)
        self.put_up_btn.setMinimumSize(QtCore.QSize(40, 40))
        self.put_up_btn.setMaximumSize(QtCore.QSize(40, 40))
        self.put_up_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/put_up_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.put_up_btn.setIcon(icon1)
        self.put_up_btn.setIconSize(QtCore.QSize(35, 35))
        self.put_up_btn.setObjectName("put_up_btn")
        self.ctrl_btns_layout.addWidget(self.put_up_btn)

        # Export btn
        self.export_btn = QtWidgets.QPushButton(self.control_frame)
        self.export_btn.clicked.connect(self.export_btn_action)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.export_btn.sizePolicy().hasHeightForWidth())
        self.export_btn.setSizePolicy(sizePolicy)
        self.export_btn.setMinimumSize(QtCore.QSize(40, 40))
        self.export_btn.setMaximumSize(QtCore.QSize(40, 40))
        self.export_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/export_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.export_btn.setIcon(icon1)
        self.export_btn.setIconSize(QtCore.QSize(35, 35))
        self.export_btn.setObjectName("export_btn")
        self.ctrl_btns_layout.addWidget(self.export_btn)

        # save btn
        self.save_btn = QtWidgets.QPushButton(self.control_frame)
        self.save_btn.clicked.connect(self.save_btn_action)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.save_btn.sizePolicy().hasHeightForWidth())
        self.save_btn.setSizePolicy(sizePolicy)
        self.save_btn.setMinimumSize(QtCore.QSize(40, 40))
        self.save_btn.setMaximumSize(QtCore.QSize(40, 40))
        self.save_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/save_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.save_btn.setIcon(icon1)
        self.save_btn.setIconSize(QtCore.QSize(35, 35))
        self.save_btn.setObjectName("save_btn")
        self.ctrl_btns_layout.addWidget(self.save_btn)

        # empty btn
        self.empty_btn = QtWidgets.QPushButton(self.control_frame)
        self.empty_btn.setEnabled(False)
        self.empty_btn.setAutoFillBackground(False)
        self.empty_btn.setText("")
        self.empty_btn.setFlat(True)
        self.empty_btn.setObjectName("empty_btn")
        self.ctrl_btns_layout.addWidget(self.empty_btn)
        self.control_frame_layout.addLayout(self.ctrl_btns_layout)

        # Tree Widget
        self.tree_view = QtWidgets.QTreeWidget(self.control_frame)
        self.tree_view.setExpandsOnDoubleClick(False)
        self.tree_view.itemDoubleClicked.connect(self.item_select_action)
        self.tree_view.itemClicked.connect(self.item_select_action)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tree_view.sizePolicy().hasHeightForWidth())
        self.tree_view.setSizePolicy(sizePolicy)
        self.tree_view.setMinimumSize(QtCore.QSize(300, 0))
        self.tree_view.setFrameShape(QtWidgets.QFrame.Panel)
        self.tree_view.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tree_view.setLineWidth(1)
        self.tree_view.setObjectName("graph_view")

        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.tree_view.headerItem().setFont(0, font)
        self.tree_view.headerItem().setFont(1, font)
        self.tree_view.headerItem().setFont(2, font)
        self.tree_view.header().setVisible(True)
        self.tree_view.header().setDefaultSectionSize(140)
        self.control_frame_layout.addWidget(self.tree_view)

        self.h_sep2 = QtWidgets.QFrame(self.control_frame)
        self.h_sep2.setFrameShape(QtWidgets.QFrame.HLine)
        self.h_sep2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.h_sep2.setObjectName("h_sep2")
        self.control_frame_layout.addWidget(self.h_sep2)

        # Gamma
        self.gamma_layout = QtWidgets.QHBoxLayout()
        self.gamma_layout.setObjectName("gamma_layout")
        self.gamma_label = QtWidgets.QLabel(self.control_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gamma_label.sizePolicy().hasHeightForWidth())
        self.gamma_label.setSizePolicy(sizePolicy)
        self.gamma_label.setMinimumSize(QtCore.QSize(30, 30))
        self.gamma_label.setMaximumSize(QtCore.QSize(60, 16777215))
        self.gamma_label.setAlignment(QtCore.Qt.AlignCenter)
        self.gamma_label.setObjectName("gamma_label")
        self.gamma_layout.addWidget(self.gamma_label)

        # slider
        self.gamma_slider = QtWidgets.QSlider(self.control_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gamma_slider.sizePolicy().hasHeightForWidth())
        self.gamma_slider.setSizePolicy(sizePolicy)
        self.gamma_slider.setMinimumSize(QtCore.QSize(120, 30))
        self.gamma_slider.setMaximumSize(QtCore.QSize(16777215, 30))
        self.gamma_slider.setOrientation(QtCore.Qt.Horizontal)
        self.gamma_slider.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.gamma_slider.setTickInterval(20)
        self.gamma_slider.setObjectName("gamma_slider")
        self.gamma_slider.setRange(1, 200)
        self.gamma_layout.addWidget(self.gamma_slider)
        self.gamma_slider.setValue(0)

        self.control_frame_layout.addLayout(self.gamma_layout)
        self.main_layout.addWidget(self.control_frame, 1, 1, 2, 1)

        # Menu bar
        MainWindow.setCentralWidget(self.main_widget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1689, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)

        # progress bar
        self.progress = QtWidgets.QProgressBar(self.statusBar)
        self.progress.setMaximumWidth(400)
        self.progress.setStyleSheet("QProgressBar::chunk {width:1px}")
        self.progress.setTextVisible(False)
        self.progress.hide()
        self.statusBar.addPermanentWidget(self.progress)

        self.action_Save = QtWidgets.QAction(MainWindow)
        self.action_Save.setObjectName("action_Save")
        self.action_Export = QtWidgets.QAction(MainWindow)
        self.action_Export.setObjectName("action_Export")
        self.action_Import = QtWidgets.QAction(MainWindow)
        self.action_Import.setObjectName("action_Import")

        self.action_Save.triggered.connect(self.save_btn_action)
        self.action_Export.triggered.connect(self.export_btn_action)
        self.action_Import.triggered.connect(self.import_btn_action)

        self.menuFile.addAction(self.action_Save)
        self.menuFile.addAction(self.action_Export)
        self.menuFile.addAction(self.action_Import)

        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "pySpectrum"))
        self.com_group.setTitle(_translate("MainWindow", "Comunication"))
        self.port_label.setText(_translate("MainWindow", "Port:"))
        self.port_combo.setItemText(0, _translate("MainWindow", "..."))
        self.refresh_btn.setText(_translate("MainWindow", "Refresh"))
        self.open_btn.setText(_translate("MainWindow", "Open"))
        self.measure_group.setTitle(_translate("MainWindow", "Measure"))
        self.single_radio.setText(_translate("MainWindow", "Single"))
        self.continued_radio.setText(_translate("MainWindow", "Continued"))
        self.stop_btn.setText(_translate("MainWindow", "Stop\n"
                                                       " Measure"))
        self.count_value.setText(_translate("MainWindow", "0"))
        self.count_label.setText(_translate("MainWindow", "Count:"))
        self.start_btn.setText(_translate("MainWindow", "Start\n"
                                                        " Measure"))
        self.measure_label.setText(_translate("MainWindow", "N° measure"))
        self.integration_label.setText(_translate("MainWindow", "Integration (ms)"))
        self.background_group.setTitle(_translate("MainWindow", "Background"))
        self.background_btn.setText(_translate("MainWindow", "Set measure as \n"
                                                             " BackGround"))
        self.subtract_check_box.setText(_translate("MainWindow", "Subtract"))
        self.graph_setting_group.setTitle(_translate("MainWindow", "Graph Setting"))
        self.grid_toggle_check_box.setText(_translate("MainWindow", "Grid on/off"))
        self.set_btn.setText("Set")
        self.get_btn.setText(_translate("MainWindow", "Get"))
        self.low_ref_label.setText(_translate("MainWindow", "Low ref"))
        self.high_ref_label.setText(_translate("MainWindow", "High ref"))
        self.rename_label.setText(_translate("MainWindow", "Rename:"))
        self.rename_btn.setText(_translate("MainWindow", "Rename"))

        self.remove_btn.setToolTip(_translate("MainWindow", "Remove Selected Measure"))
        self.save_btn.setToolTip(_translate("MainWindow", "Save current plot"))
        self.compare_btn.setToolTip(_translate("MainWindow", "Compare two or more measure"))
        self.probe_btn.setToolTip(_translate("MainWindow", "Probe value of graph"))
        self.put_up_btn.setToolTip(_translate("MainWindow", "Put measure un top of the list"))

        self.tree_view.headerItem().setText(0, _translate("MainWindow", "Name"))
        self.tree_view.headerItem().setText(1, _translate("MainWindow", "Value"))
        self.tree_view.headerItem().setText(2, _translate("MainWindow", ""))
        __sortingEnabled = self.tree_view.isSortingEnabled()
        self.tree_view.setSortingEnabled(False)
        self.tree_view.setSortingEnabled(__sortingEnabled)
        self.gamma_label.setText(_translate("MainWindow", "Gamma"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.action_Save.setText(_translate("MainWindow", "Save Graph"))
        self.action_Save.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.action_Export.setText(_translate("MainWindow", "Export"))
        self.action_Export.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.action_Import.setText(_translate("MainWindow", "Import"))
        self.action_Import.setShortcut(_translate("MainWindow", "Ctrl+I"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
